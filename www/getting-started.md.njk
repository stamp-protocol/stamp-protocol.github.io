---
layout: page.njk
title: Getting started with Stamp
---

## Getting started

Let's download and install Stamp.
Its current implementation is a CLI application, requiring rust 1.70+ and cargo:

```
mkdir stamp && cd stamp
git clone https://github.com/stamp-protocol/core.git
git clone https://github.com/stamp-protocol/net.git
git clone https://github.com/stamp-protocol/aux.git
git clone https://github.com/stamp-protocol/cli.git
cd cli
make
ln -s ./target/debug/cli stamp
```

Good job! First, let's create an identity.

```
$ ./stamp id new
```

The program will guide you to creating your first identity, and once you're done,
it will be added to your local identity storage. Your identity will have three
claims: your identity claim, your name claim, and your email claim. You can view
them like so:

```
$ ./stamp claim list
 ID (short)       | Name | Type     | Value             | Created      | # stamps
------------------+------+----------+-------------------+--------------+----------
 Dr4qJ88VNLMraCqX | -    | identity | Zef-ZpmdW1CsA-zx  | Jan 03, 2024 | 0
 yMRZQTTIsPdmCuha | -    | name     | Zefram Cochrane   | Jan 03, 2024 | 0
 13_BWJcu_HrKFQV0 | -    | email    | zef@starfleet.org | Jan 03, 2024 | 0
```

But why settle just for what's given by default? Let's add a claim of our own!

```
$ ./stamp claim new photo /path/to/picture-of-you.jpg
```

Well done, your identity has a photo now. People who know what you look like can
now stamp your photo claim, adding trust to your identity!

Stamp can also handle another type of claim: one that can be verified immediately.
Both the `domain` and `url` claim types support direct
verification. Let's try it out (note that you'll need to be able to write to a
public website to do this).

```
$ ./stamp claim new url
Enter the URL you own: https://news.ycombinator.com/user?id=xX_zefram420_Xx
Claim added. You can finalize this claim and make it verifiable instantly to others by updating the URL
https://news.ycombinator.com/user?id=xX_zefram420_Xx to contain one of the following two values:

  stamp:HflWay2xmCYnbqTKYP3utSo0s3v4Ne3vWOBzwHziD-oA
  stamp:HflWay2xmCYnbqTK
```

So let's update your HackerNews profile at the URL you entered to contain
`stamp:HflWay2xmCYnbqTK`. Done? Now things get spicy:

```
$ ./stamp claim check HflWay2xmCYnbqTK

The claim HflWay2xmCYnbqTK has been verified!

It is very likely that the identity Zef-ZpmdW1CsA-zx owns the resource
https://news.ycombinator.com/user?id=xX_zefram420_Xx
```

And just like that, you've proven you own your HackerNews profile.
Notice you don't need a central server to check the validity of the claim
(suck it, Keybase). You can do it from the comfort of your 430 sq ft $5,700/mo
San Francisco apartment.

Ok, we've set up our claims. Now what? How do we actually, you know, <em>Stamp&trade;</em>
things? Let's <a href="{{ site.url }}/assets/zefram.stamp">download Zefram's identity</a> (who I may
later refer to as "Zef"), generated using <code>./stamp id publish</code>. Now
import it into your local storage.

```
$ ./stamp id import /path/to/zefram.stamp
```

Now that it's in our local storage, let's view the claims on this identity.

```
$ ./stamp claim list --id Zef
 ID (short)       | Name | Type     | Value                                                | Created      | # stamps
------------------+------+----------+------------------------------------------------------+--------------+----------
 Dr4qJ88VNLMraCqX | -    | identity | Zef-ZpmdW1CsA-zx                                     | Jan 03, 2024 | 0
 yMRZQTTIsPdmCuha | -    | name     | Zefram Cochrane                                      | Jan 03, 2024 | 0
 13_BWJcu_HrKFQV0 | -    | email    | zef@starfleet.org                                    | Jan 03, 2024 | 0
 j98fNieA0pRXwKS6 | -    | photo    | <4008 bytes>                                         | Jan 03, 2024 | 0
 HflWay2xmCYnbqTK | -    | url      | https://news.ycombinator.com/user?id=xX_zefram420_Xx | Jan 03, 2024 | 0
```

Normally, you'd only stamp a claim if you were actually going to verify it. But
because we're doing a tutorial, let's just pick a claim and *pretend*
you've verified it, which is basically what SSL certificate providers do. We're going
to stamp the `identity` claim.

```
$ ./stamp stamp new Dr4qJ88VNLMraCqX
You are about to stamp the claim Dr4qJ88VNLMraCqX made by the identity Zef-ZpmdW1CsA-zx.
Effectively, you are vouching for them and that their claim is true. You can specify your confidence in the claim:
    none
        you are not verifying the claim at all, but wish to stamp it anyway
    low
        you have done a quick and dirty verification of the claim
    medium
        you're doing a decent amount of verification, such as having them click a verification link in email
    high
        you have verified the claim extensively (birth certificates, retinal scans, fingerprint matching, etc)
    extreme
        you have known this person for the last 50 years and can be absolutely certain that the claim they are making is correct
        and they are not a hologram or an android imposter

How confident are you in this claim?: low
Would you like your stamp to expire on a certain date? [y/N]: n
Stamp on claim Dr4qJ88VNLMraCqXBGoNO8ILbtizognoTwOvR3o7OtYA created.
```

Note the lack of fire gifs
<img class="w-3 h-4 inline-block" alt="fire" src="./assets/images/fireanim.gif">
surrounding the "extreme" option. *This is a bug and we're working on it.* This operation added the
stamp to *our identity*. By default, stamps are saved to the stamper's identity.

Now, if Zefram wants to accept your stamp onto his identity, he can download your identity from
StampNet (coming soon!), or the stamp can be exported and sent directly.
All you need is a way to communicate this stamp to Zef. But, oh, look at that!
There's an email claim, so you can go ahead and send it to `zefram@starfleet.org`.

Let's export the stamp and email it to Zefram:

```
$ ./stamp stamp list
 ID (short)       | Stampee          | Claim            | Confidence | Created      | Expires
------------------+------------------+------------------+------------+--------------+---------
 ilik2Qll91ayj_YA | Zef-ZpmdW1CsA-zx | Dr4qJ88VNLMraCqX | low        | Jan 04, 2024 | -

$ ./stamp stamp export ilik2Qll91ayj_YA -b
MIIBYqAmMCSgIgQgilik2Qll91ayj_YAeMs8yXanIVWJ9OOdOjMuD1Lm2bqhgcMwgcCgCAIGAYzTp4-jo
SgwJjAkoCIEILSu2LuV0C-YEOhrYA5Be_e7ZEccnNwMOv_6MC56MDytooGJqoGGMIGDoIGAMH6gJjAkoC
IEILNH__07TcYlKzSfMoteL1ULXnnD-8UGEM3KIYT6jnbfoSYwJKAiBCBl5_5mmZ1bUKwD7PGpTMdM_aw
pnBSqd9XehDsOLaAvcKImMCSgIgQgDr4qJ88VNLMraCqXBGoNO8ILbtizognoTwOvR3o7OtajBKECBQCi
cjBwoG4wbKAkoCIEIKDmNHCSnibCj7sBu0xHMW2r39lMo20o-SFpHsFUJgK5oUSgQgRAXeuErZt9bu65J
mIK51-HfTi9p6Q38Wf1QTMI3Bx8GO1vWVuZGsk9QHormGe5cPkj50LNI8wm8yBCAdp6zkBvCw
```

On the receiving end, Zef might do something like this:

```
$ ./stamp stamp accept /path/to/stamp/downloaded/from/email
---
id:
  Blake3: ilik2Qll91ayj_YAeMs8yXanIVWJ9OOdOjMuD1Lm2bo
entry:
  created: "2024-01-04T08:47:03.075Z"
  previous_transactions:
    - Blake3: tK7Yu5XQL5gQ6GtgDkF797tkRxyc3Aw6__owLnowPK0
  body:
    MakeStampV1:
      stamp:
        stamper:
          Blake3: s0f__TtNxiUrNJ8yi14vVQteecP7xQYQzcohhPqOdt8
        stampee:
          Blake3: Zef-ZpmdW1CsA-zxqUzHTP2sKZwUqnfV3oQ7Di2gL3A
        claim_id:
          Blake3: Dr4qJ88VNLMraCqXBGoNO8ILbtizognoTwOvR3o7OtY
        confidence: Low
        expires: ~
signatures:
  - Key:
      key:
        Ed25519: oOY0cJKeJsKPuwG7TEcxbavf2UyjbSj5IWkewVQmArk
      signature:
        Ed25519: XeuErZt9bu65JmIK51-HfTi9p6Q38Wf1QTMI3Bx8GO1vWVuZGsk9QHormGe5cPkj50LNI8wm8yBCAdp6zkBvCw

----------
Do you wish to accept the above stamp? [Y/n]: Y
Stamp ilik2Qll91ayj_YAeMs8yXanIVWJ9OOdOjMuD1Lm2boA has been accepted.
```

And the stamp is accepted! Zef thanks you for your trust.

[cli]: https://github.com/stamp-protocol/cli
[cli-get-started]: https://github.com/stamp-protocol/cli#getting-started
[core]: https://github.com/stamp-protocol/core


